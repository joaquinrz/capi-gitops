apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  name: register-cluster
  annotations:
    policies.kyverno.io/title: Argo Cluster Secret Registration
    policies.kyverno.io/category: Argo
    policies.kyverno.io/severity: medium
    policies.kyverno.io/subject: Secret
    kyverno.io/kyverno-version: 1.7.1
    policies.kyverno.io/minversion: 1.7.0
    kyverno.io/kubernetes-version: "1.23"
    policies.kyverno.io/description: >-
      This policy registers newly created CAPI clusters with ArgoCD
spec:
  rules:
    - name: generate-secret
      match:
        all:
        - resources:
            kinds:
            - Secret
            names:
            - "*-kubeconfig"
      context:
      - name: clusterName
        variable:
          value: "{{ replace_all('{{request.object.metadata.name}}', '-kubeconfig', '') }}"
          jmesPath: 'to_string(@)'
      - name: extraLabels
        variable:
          value:
            argocd.argoproj.io/secret-type: cluster
            clusterId: "{{ clusterName }}"
            clusterType: "tenant" 
      - name: serverName
        variable:
          value: "{{  request.object.data.value | base64_decode(@) | parse_yaml(@).clusters[0].cluster.server }}"
          jmesPath: 'to_string(@)'
      - name: certData
        variable:
          value: "{{ request.object.data.value | base64_decode(@) | parse_yaml(@).users[0].user.\"client-certificate-data\" }}"
          jmesPath: 'to_string(@)'
      - name: keyData
        variable:
          value: "{{ request.object.data.value | base64_decode(@) | parse_yaml(@).users[0].user.\"client-key-data\" }}"
          jmesPath: 'to_string(@)'
      - name: caData
        variable:
          value: "{{ request.object.data.value | base64_decode(@) | parse_yaml(@).clusters[0].cluster.\"certificate-authority-data\" }}"
          jmesPath: 'to_string(@)'
      - name: dataConfig
        variable:
          value: |
            {
              "tlsClientConfig": {
                "insecure": false,
                "certData": "{{ certData }}",
                "keyData": "{{ keyData }}",
                "caData": "{{ caData }}"
              }
            }     
          jmesPath: 'to_string(@)'
      generate:
        synchronize: true
        apiVersion: v1
        kind: Secret
        name: "{{ clusterName }}"
        namespace: argocd
        data:
          metadata:
            annotations:
              managed-by: argocd.argoproj.io              
            labels:
              "{{ extraLabels }}"
          type: Opaque
          data:
            name: "{{ clusterName | base64_encode(@) }}"
            server: "{{ serverName | base64_encode(@) }}"
            config: "{{ dataConfig | base64_encode(@) }}"